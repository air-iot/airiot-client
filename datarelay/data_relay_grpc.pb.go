// Copyright 2015 The gRPC Authors

// protoc -I ./ --go_out=. ./datarelay/data_relay.proto
// protoc -I ./ --go-grpc_out=. datarelay/data_relay.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: datarelay/data_relay.proto

package datarelay

import (
	context "context"
	api "github.com/air-iot/api-client-go/v4/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataRelayService_Query_FullMethodName   = "/datarelay.DataRelayService/Query"
	DataRelayService_Get_FullMethodName     = "/datarelay.DataRelayService/Get"
	DataRelayService_Delete_FullMethodName  = "/datarelay.DataRelayService/Delete"
	DataRelayService_Update_FullMethodName  = "/datarelay.DataRelayService/Update"
	DataRelayService_Replace_FullMethodName = "/datarelay.DataRelayService/Replace"
	DataRelayService_Create_FullMethodName  = "/datarelay.DataRelayService/Create"
)

// DataRelayServiceClient is the client API for DataRelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataRelayServiceClient interface {
	Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error)
	Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error)
	Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error)
	Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
}

type dataRelayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataRelayServiceClient(cc grpc.ClientConnInterface) DataRelayServiceClient {
	return &dataRelayServiceClient{cc}
}

func (c *dataRelayServiceClient) Query(ctx context.Context, in *api.QueryRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DataRelayService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRelayServiceClient) Get(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DataRelayService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRelayServiceClient) Delete(ctx context.Context, in *api.GetOrDeleteRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DataRelayService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRelayServiceClient) Update(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DataRelayService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRelayServiceClient) Replace(ctx context.Context, in *api.UpdateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DataRelayService_Replace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRelayServiceClient) Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, DataRelayService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataRelayServiceServer is the server API for DataRelayService service.
// All implementations must embed UnimplementedDataRelayServiceServer
// for forward compatibility
type DataRelayServiceServer interface {
	Query(context.Context, *api.QueryRequest) (*api.Response, error)
	Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error)
	Update(context.Context, *api.UpdateRequest) (*api.Response, error)
	Replace(context.Context, *api.UpdateRequest) (*api.Response, error)
	Create(context.Context, *api.CreateRequest) (*api.Response, error)
	mustEmbedUnimplementedDataRelayServiceServer()
}

// UnimplementedDataRelayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataRelayServiceServer struct {
}

func (UnimplementedDataRelayServiceServer) Query(context.Context, *api.QueryRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDataRelayServiceServer) Get(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDataRelayServiceServer) Delete(context.Context, *api.GetOrDeleteRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDataRelayServiceServer) Update(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDataRelayServiceServer) Replace(context.Context, *api.UpdateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedDataRelayServiceServer) Create(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDataRelayServiceServer) mustEmbedUnimplementedDataRelayServiceServer() {}

// UnsafeDataRelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataRelayServiceServer will
// result in compilation errors.
type UnsafeDataRelayServiceServer interface {
	mustEmbedUnimplementedDataRelayServiceServer()
}

func RegisterDataRelayServiceServer(s grpc.ServiceRegistrar, srv DataRelayServiceServer) {
	s.RegisterService(&DataRelayService_ServiceDesc, srv)
}

func _DataRelayService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRelayServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataRelayService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRelayServiceServer).Query(ctx, req.(*api.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRelayService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRelayServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataRelayService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRelayServiceServer).Get(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRelayService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetOrDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRelayServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataRelayService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRelayServiceServer).Delete(ctx, req.(*api.GetOrDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRelayService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRelayServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataRelayService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRelayServiceServer).Update(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRelayService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRelayServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataRelayService_Replace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRelayServiceServer).Replace(ctx, req.(*api.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRelayService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRelayServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataRelayService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRelayServiceServer).Create(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataRelayService_ServiceDesc is the grpc.ServiceDesc for DataRelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataRelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datarelay.DataRelayService",
	HandlerType: (*DataRelayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DataRelayService_Query_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DataRelayService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DataRelayService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DataRelayService_Update_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _DataRelayService_Replace_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DataRelayService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datarelay/data_relay.proto",
}

const (
	DataRelayInstanceService_HealthCheck_FullMethodName     = "/datarelay.DataRelayInstanceService/HealthCheck"
	DataRelayInstanceService_StartStream_FullMethodName     = "/datarelay.DataRelayInstanceService/StartStream"
	DataRelayInstanceService_HttpProxyStream_FullMethodName = "/datarelay.DataRelayInstanceService/HttpProxyStream"
)

// DataRelayInstanceServiceClient is the client API for DataRelayInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataRelayInstanceServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	StartStream(ctx context.Context, opts ...grpc.CallOption) (DataRelayInstanceService_StartStreamClient, error)
	HttpProxyStream(ctx context.Context, opts ...grpc.CallOption) (DataRelayInstanceService_HttpProxyStreamClient, error)
}

type dataRelayInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataRelayInstanceServiceClient(cc grpc.ClientConnInterface) DataRelayInstanceServiceClient {
	return &dataRelayInstanceServiceClient{cc}
}

func (c *dataRelayInstanceServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DataRelayInstanceService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRelayInstanceServiceClient) StartStream(ctx context.Context, opts ...grpc.CallOption) (DataRelayInstanceService_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataRelayInstanceService_ServiceDesc.Streams[0], DataRelayInstanceService_StartStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dataRelayInstanceServiceStartStreamClient{stream}
	return x, nil
}

type DataRelayInstanceService_StartStreamClient interface {
	Send(*Result) error
	Recv() (*DataRelayInstanceStartRequest, error)
	grpc.ClientStream
}

type dataRelayInstanceServiceStartStreamClient struct {
	grpc.ClientStream
}

func (x *dataRelayInstanceServiceStartStreamClient) Send(m *Result) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataRelayInstanceServiceStartStreamClient) Recv() (*DataRelayInstanceStartRequest, error) {
	m := new(DataRelayInstanceStartRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataRelayInstanceServiceClient) HttpProxyStream(ctx context.Context, opts ...grpc.CallOption) (DataRelayInstanceService_HttpProxyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataRelayInstanceService_ServiceDesc.Streams[1], DataRelayInstanceService_HttpProxyStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dataRelayInstanceServiceHttpProxyStreamClient{stream}
	return x, nil
}

type DataRelayInstanceService_HttpProxyStreamClient interface {
	Send(*Result) error
	Recv() (*HttpProxyRequest, error)
	grpc.ClientStream
}

type dataRelayInstanceServiceHttpProxyStreamClient struct {
	grpc.ClientStream
}

func (x *dataRelayInstanceServiceHttpProxyStreamClient) Send(m *Result) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataRelayInstanceServiceHttpProxyStreamClient) Recv() (*HttpProxyRequest, error) {
	m := new(HttpProxyRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataRelayInstanceServiceServer is the server API for DataRelayInstanceService service.
// All implementations must embed UnimplementedDataRelayInstanceServiceServer
// for forward compatibility
type DataRelayInstanceServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	StartStream(DataRelayInstanceService_StartStreamServer) error
	HttpProxyStream(DataRelayInstanceService_HttpProxyStreamServer) error
	mustEmbedUnimplementedDataRelayInstanceServiceServer()
}

// UnimplementedDataRelayInstanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataRelayInstanceServiceServer struct {
}

func (UnimplementedDataRelayInstanceServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDataRelayInstanceServiceServer) StartStream(DataRelayInstanceService_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedDataRelayInstanceServiceServer) HttpProxyStream(DataRelayInstanceService_HttpProxyStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HttpProxyStream not implemented")
}
func (UnimplementedDataRelayInstanceServiceServer) mustEmbedUnimplementedDataRelayInstanceServiceServer() {
}

// UnsafeDataRelayInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataRelayInstanceServiceServer will
// result in compilation errors.
type UnsafeDataRelayInstanceServiceServer interface {
	mustEmbedUnimplementedDataRelayInstanceServiceServer()
}

func RegisterDataRelayInstanceServiceServer(s grpc.ServiceRegistrar, srv DataRelayInstanceServiceServer) {
	s.RegisterService(&DataRelayInstanceService_ServiceDesc, srv)
}

func _DataRelayInstanceService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRelayInstanceServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataRelayInstanceService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRelayInstanceServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRelayInstanceService_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataRelayInstanceServiceServer).StartStream(&dataRelayInstanceServiceStartStreamServer{stream})
}

type DataRelayInstanceService_StartStreamServer interface {
	Send(*DataRelayInstanceStartRequest) error
	Recv() (*Result, error)
	grpc.ServerStream
}

type dataRelayInstanceServiceStartStreamServer struct {
	grpc.ServerStream
}

func (x *dataRelayInstanceServiceStartStreamServer) Send(m *DataRelayInstanceStartRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataRelayInstanceServiceStartStreamServer) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataRelayInstanceService_HttpProxyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataRelayInstanceServiceServer).HttpProxyStream(&dataRelayInstanceServiceHttpProxyStreamServer{stream})
}

type DataRelayInstanceService_HttpProxyStreamServer interface {
	Send(*HttpProxyRequest) error
	Recv() (*Result, error)
	grpc.ServerStream
}

type dataRelayInstanceServiceHttpProxyStreamServer struct {
	grpc.ServerStream
}

func (x *dataRelayInstanceServiceHttpProxyStreamServer) Send(m *HttpProxyRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataRelayInstanceServiceHttpProxyStreamServer) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataRelayInstanceService_ServiceDesc is the grpc.ServiceDesc for DataRelayInstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataRelayInstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datarelay.DataRelayInstanceService",
	HandlerType: (*DataRelayInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _DataRelayInstanceService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStream",
			Handler:       _DataRelayInstanceService_StartStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HttpProxyStream",
			Handler:       _DataRelayInstanceService_HttpProxyStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "datarelay/data_relay.proto",
}

// Copyright 2015 The gRPC Authors
// protoc -I . --go_out=plugins=grpc:. ./algorithm.proto

// protoc -I ./ --go_out=. ./algorithm/algorithm.proto
// protoc -I ./ --go-grpc_out=. algorithm/algorithm.proto

// kratos proto server ./grpc/algorithm/algorithm.proto -t grpc/algorithm

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: algorithm/algorithm.proto

package algorithm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlgorithmService_HealthCheck_FullMethodName  = "/algorithm.algorithmService/HealthCheck"
	AlgorithmService_SchemaStream_FullMethodName = "/algorithm.algorithmService/SchemaStream"
	AlgorithmService_RunStream_FullMethodName    = "/algorithm.algorithmService/RunStream"
	AlgorithmService_Run_FullMethodName          = "/algorithm.algorithmService/Run"
)

// AlgorithmServiceClient is the client API for AlgorithmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlgorithmServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	SchemaStream(ctx context.Context, opts ...grpc.CallOption) (AlgorithmService_SchemaStreamClient, error)
	RunStream(ctx context.Context, opts ...grpc.CallOption) (AlgorithmService_RunStreamClient, error)
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResult, error)
}

type algorithmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlgorithmServiceClient(cc grpc.ClientConnInterface) AlgorithmServiceClient {
	return &algorithmServiceClient{cc}
}

func (c *algorithmServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AlgorithmService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algorithmServiceClient) SchemaStream(ctx context.Context, opts ...grpc.CallOption) (AlgorithmService_SchemaStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlgorithmService_ServiceDesc.Streams[0], AlgorithmService_SchemaStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &algorithmServiceSchemaStreamClient{stream}
	return x, nil
}

type AlgorithmService_SchemaStreamClient interface {
	Send(*SchemaResult) error
	Recv() (*SchemaRequest, error)
	grpc.ClientStream
}

type algorithmServiceSchemaStreamClient struct {
	grpc.ClientStream
}

func (x *algorithmServiceSchemaStreamClient) Send(m *SchemaResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *algorithmServiceSchemaStreamClient) Recv() (*SchemaRequest, error) {
	m := new(SchemaRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *algorithmServiceClient) RunStream(ctx context.Context, opts ...grpc.CallOption) (AlgorithmService_RunStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlgorithmService_ServiceDesc.Streams[1], AlgorithmService_RunStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &algorithmServiceRunStreamClient{stream}
	return x, nil
}

type AlgorithmService_RunStreamClient interface {
	Send(*RunResult) error
	Recv() (*RunRequest, error)
	grpc.ClientStream
}

type algorithmServiceRunStreamClient struct {
	grpc.ClientStream
}

func (x *algorithmServiceRunStreamClient) Send(m *RunResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *algorithmServiceRunStreamClient) Recv() (*RunRequest, error) {
	m := new(RunRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *algorithmServiceClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResult, error) {
	out := new(RunResult)
	err := c.cc.Invoke(ctx, AlgorithmService_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgorithmServiceServer is the server API for AlgorithmService service.
// All implementations must embed UnimplementedAlgorithmServiceServer
// for forward compatibility
type AlgorithmServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	SchemaStream(AlgorithmService_SchemaStreamServer) error
	RunStream(AlgorithmService_RunStreamServer) error
	Run(context.Context, *RunRequest) (*RunResult, error)
	mustEmbedUnimplementedAlgorithmServiceServer()
}

// UnimplementedAlgorithmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlgorithmServiceServer struct {
}

func (UnimplementedAlgorithmServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAlgorithmServiceServer) SchemaStream(AlgorithmService_SchemaStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SchemaStream not implemented")
}
func (UnimplementedAlgorithmServiceServer) RunStream(AlgorithmService_RunStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RunStream not implemented")
}
func (UnimplementedAlgorithmServiceServer) Run(context.Context, *RunRequest) (*RunResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedAlgorithmServiceServer) mustEmbedUnimplementedAlgorithmServiceServer() {}

// UnsafeAlgorithmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlgorithmServiceServer will
// result in compilation errors.
type UnsafeAlgorithmServiceServer interface {
	mustEmbedUnimplementedAlgorithmServiceServer()
}

func RegisterAlgorithmServiceServer(s grpc.ServiceRegistrar, srv AlgorithmServiceServer) {
	s.RegisterService(&AlgorithmService_ServiceDesc, srv)
}

func _AlgorithmService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorithmServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlgorithmService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorithmServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlgorithmService_SchemaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlgorithmServiceServer).SchemaStream(&algorithmServiceSchemaStreamServer{stream})
}

type AlgorithmService_SchemaStreamServer interface {
	Send(*SchemaRequest) error
	Recv() (*SchemaResult, error)
	grpc.ServerStream
}

type algorithmServiceSchemaStreamServer struct {
	grpc.ServerStream
}

func (x *algorithmServiceSchemaStreamServer) Send(m *SchemaRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *algorithmServiceSchemaStreamServer) Recv() (*SchemaResult, error) {
	m := new(SchemaResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AlgorithmService_RunStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlgorithmServiceServer).RunStream(&algorithmServiceRunStreamServer{stream})
}

type AlgorithmService_RunStreamServer interface {
	Send(*RunRequest) error
	Recv() (*RunResult, error)
	grpc.ServerStream
}

type algorithmServiceRunStreamServer struct {
	grpc.ServerStream
}

func (x *algorithmServiceRunStreamServer) Send(m *RunRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *algorithmServiceRunStreamServer) Recv() (*RunResult, error) {
	m := new(RunResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AlgorithmService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorithmServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlgorithmService_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorithmServiceServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlgorithmService_ServiceDesc is the grpc.ServiceDesc for AlgorithmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlgorithmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "algorithm.algorithmService",
	HandlerType: (*AlgorithmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AlgorithmService_HealthCheck_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _AlgorithmService_Run_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SchemaStream",
			Handler:       _AlgorithmService_SchemaStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RunStream",
			Handler:       _AlgorithmService_RunStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "algorithm/algorithm.proto",
}

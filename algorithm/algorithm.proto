// Copyright 2015 The gRPC Authors
// protoc -I . --go_out=plugins=grpc:. ./algorithm.proto


// protoc -I ./ --go_out=. ./algorithm/algorithm.proto
// protoc -I ./ --go-grpc_out=. algorithm/algorithm.proto

// kratos proto server ./grpc/algorithm/algorithm.proto -t grpc/algorithm

syntax = "proto3";

package algorithm;

import "api/api.proto";

option go_package = "./algorithm;algorithm";
option java_package = "cn.airiot.sdk.algorithm.grpc.algorithm";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option java_generic_services = false;

service LocalAlgorithmService {
  rpc Query (api.QueryRequest) returns (api.Response) {}
  rpc Get (api.GetOrDeleteRequest) returns (api.Response) {}
  rpc Delete (api.GetOrDeleteRequest) returns (api.Response) {}
  rpc Update (api.UpdateRequest) returns (api.Response) {}
  rpc Replace (api.UpdateRequest) returns (api.Response) {}
  rpc Create (api.CreateRequest) returns (api.Response) {}
  rpc CreateMany (api.CreateRequest) returns (api.Response) {}
  rpc DeleteMany (api.QueryRequest) returns (api.Response) {}
}

service AlgorithmService {
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse) {}
  rpc SchemaStream (stream SchemaResult) returns (stream SchemaRequest) {}
  rpc RunStream (stream RunResult) returns (stream RunRequest) {}

  rpc Run (ClientRunByIdRequest) returns (api.Response) {}
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
  }
  ServingStatus status = 1;
  repeated Error errors = 2;
}

message Error {
  enum ErrorCode {
    Health = 0;
    Schema = 1;
    Run = 2;
  }
  ErrorCode code = 1;
  string message = 2;
}

message SchemaRequest {
  string request = 1;
}

message SchemaResult {
  string request = 1;
  bytes message = 2;
}

message RunRequest {
  string request = 1;
  bytes data = 2;
}

message RunResult {
  string request = 1;
  bytes message = 2;
}

message ClientRunByIdRequest {
  string id = 1;
  bytes data = 2;
}
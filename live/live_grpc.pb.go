// Copyright 2015 The gRPC Authors
// protoc -I . --go_out=plugins=grpc:. ./live.proto

// protoc -I ./ --go_out=. ./live/live.proto
// protoc -I ./ --go-grpc_out=. live/live.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: live/live.proto

package live

import (
	context "context"
	api "github.com/air-iot/api-client-go/v4/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveService_Create_FullMethodName = "/live.LiveService/Create"
)

// LiveServiceClient is the client API for LiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveServiceClient interface {
	Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error)
}

type liveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveServiceClient(cc grpc.ClientConnInterface) LiveServiceClient {
	return &liveServiceClient{cc}
}

func (c *liveServiceClient) Create(ctx context.Context, in *api.CreateRequest, opts ...grpc.CallOption) (*api.Response, error) {
	out := new(api.Response)
	err := c.cc.Invoke(ctx, LiveService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServiceServer is the server API for LiveService service.
// All implementations must embed UnimplementedLiveServiceServer
// for forward compatibility
type LiveServiceServer interface {
	Create(context.Context, *api.CreateRequest) (*api.Response, error)
	mustEmbedUnimplementedLiveServiceServer()
}

// UnimplementedLiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveServiceServer struct {
}

func (UnimplementedLiveServiceServer) Create(context.Context, *api.CreateRequest) (*api.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLiveServiceServer) mustEmbedUnimplementedLiveServiceServer() {}

// UnsafeLiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServiceServer will
// result in compilation errors.
type UnsafeLiveServiceServer interface {
	mustEmbedUnimplementedLiveServiceServer()
}

func RegisterLiveServiceServer(s grpc.ServiceRegistrar, srv LiveServiceServer) {
	s.RegisterService(&LiveService_ServiceDesc, srv)
}

func _LiveService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServiceServer).Create(ctx, req.(*api.CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveService_ServiceDesc is the grpc.ServiceDesc for LiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "live.LiveService",
	HandlerType: (*LiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LiveService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live/live.proto",
}
